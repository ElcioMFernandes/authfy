generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/* === Main tables === */

model User {
  // Field definitions
  id       String  @id @default(uuid())
  name     String
  email    String? @unique
  phone    String? @unique
  username String  @unique
  password String

  // Foreign Keys

  // Audit Fields
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  

  // Relationships
  userRoles UserRole[]

}

model Role {
  // Field definitions
  id          String @id @default(uuid())
  name        String @unique
  description String?

  // Foreign Keys

  // Audit Fields
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userRoles UserRole[]
  rolePermissions RolePermission[]
}

model Permission {
  // Field definitions
  id          String @id @default(uuid())
  name        String @unique
  description String?

  // Foreign Keys
  moduleId    String

  // Audit Fields
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  rolePermissions RolePermission[]
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
}

model Module {
  // Field definitions
  id          String @id @default(uuid())
  name        String @unique
  description String?

  // Foreign Keys
  applicationId String

  // Audit Fields
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  permissions Permission[]
  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model Application {
  // Field definitions
  id          String @id @default(uuid())
  name        String @unique
  description String?

  // Foreign Keys

  // Audit Fields
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  modules Module[]
}

/* === Relational tables === */

model UserRole {
  // Field definitions
  id         String @id @default(uuid())

  // Foreign Keys
  userId String
  roleId String

  // Audit Fields
  isActive   Boolean  @default(true)
  assignedAt DateTime @default(now())
  assignedBy String?

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

model RolePermission {
  // Field definitions
  id         String @id @default(uuid())

  // Foreign Keys
  roleId       String
  permissionId String

  // Audit Fields
  isActive   Boolean  @default(true)
  assignedAt DateTime @default(now())
  assignedBy String?

  // Relationships
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}